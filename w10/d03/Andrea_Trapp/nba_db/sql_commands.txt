
NBA
===

1. All columns for all players from the New York Knicks (NYK)
SELECT * FROM players WHERE team LIKE 'NYK';

2. All columns for all players from the Indiana Pacers (IND) who are under 26 years old
SELECT * FROM players WHERE team LIKE 'IND' AND age < 26;

3. All columns for all players, ordered from least points scored to most points scored
SELECT * FROM players ORDER BY points ASC;

4. Name and Points per game (points/games), for the players with the top 20 points per game
SELECT name, points FROM players ORDER BY points DESC LIMIT 20;

5. The average age for all players
SELECT AVG(age) FROM players;

6. The average age for all players on the Oklahoma City Thunder (OKC)
SELECT AVG(age) FROM players WHERE team LIKE 'OKC';

7. The average age for all players who played more than 40 games
SELECT AVG(age) FROM players WHERE games > 40;

8. The team and total points scored from all players on that team (team points), ordered from most team points to least
SELECT team, SUM(points) FROM players GROUP BY team ORDER BY SUM(points) DESC;


Bonus:
------
9. Age and the average points per game for that age, ordered from youngest to oldest
SELECT age, AVG(points)/AVG(games) AS avg_points FROM players GROUP BY age ORDER BY age ASC;

10. Team and the number of players who score above 12 points per game on that team, ordered from most to least

( >>> inside the descending sorting of players number I sorted the team alphabetically in ascending order - that was my bonus :) <<< )
SELECT team, COUNT(name) FROM players WHERE (points/games > 12) GROUP BY team ORDER BY COUNT(name) DESC, team ASC; 



GUTENBERG 
=========

1. top 20 group count of books by author_id, order by count descending 
SELECT author_id, count(*) FROM books GROUP BY author_id ORDER BY COUNT(title) DESC LIMIT 20;

2. number of authors grouped by first letter of name 
SELECT LEFT(name,1), count(*) FROM authors GROUP BY LEFT(name,1) ORDER BY LEFT(name,1) ASC;

3. top 20 authors grouped by book count in descending order

( >>> not sure, if I understood the task correctly, because of "ERROR:  aggregate functions are not allowed in GROUP BY
... JOIN authors AS a ON b.author_id = a.id GROUP BY COUNT(b.*)", so I assumed the selection should show the top 20 list of author names according to the amount of their books in descending order <<<)

SELECT COUNT(b.title), a.name FROM books as b INNER JOIN authors AS a ON b.author_id = a.id GROUP BY b.author_id, a.name ORDER BY COUNT(b.*) DESC LIMIT 20;


Bonus:
------

1. top 15 books with 'love' in title, grouped by author

( ... not completely sure, what was asked here ...)
SELECT a.name, b.title FROM books AS b INNER JOIN authors AS a ON b.author_id = a.id WHERE b.title LIKE '%love%' GROUP BY a.name, b.title LIMIT 15;

2. List of book titles containing the word "love", along with their author, grouped by total word count in ascending order

( >>> task is unclear..., is it a single word - not substring - in title? and then total word count on which word ?, very confusing <<< )
SELECT b.title, a.name FROM books AS b INNER JOIN authors AS a ON b.author_id = a.id WHERE b.title LIKE '% love %' GROUP BY ??? ORDER BY ??? ASC;



