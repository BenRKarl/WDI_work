ruby regexp.rb
==============
1. save_as("sam_count.txt", text.scan(/(?!Sam-I-am)(Sam)/).count())

2. save_as("list.txt", text.scan(/(?:a{1})\s(\w+)/).uniq.flatten!)

NOT THIS: save_as("list2.txt", text.scan(/(Not)\s\S{2,4}\s(the|a)\s[a-z]+\W/).uniq.flatten!)

3. save_as("sammy_jam.txt", text.gsub(/(Sam-I-am)/, "Sammy Jam"))

4. save_as("affirmative.txt", text.gsub(/[Nn]ot/, ""))

5. save_as("matt.txt", text.gsub(/(Sam)/, "Matt").gsub(/(green eggs and ham)/, "coconut oil and lamb"))

6. 



http://rubular.com/
===================
1. Count all instances where Sam is not referred to as "Sam-I-Am." (.scan might be helpful here)
(Sam)

2. Create a file, "list", that lists all the places and animals whom Sam refuses to eat with (the bigot).
(Not)\s\S{2,4}\s(the|a)\s[a-z]+\W

3. Create a file, "sammy_jam", in which all instances of Sam-I-Am to "Sammy Jam." (We're talking .gsub baby!)

4. Create a new file, "affirmative", in which the narrator constantly agrees to eat (ie, remove the nots).

5. Create a new file, "matt", where "Sam" is "Matt," and is referred to as "Matt-I-Say", and the narrator is being forced to eat "coconut oil and lamb".


Bonus:

6. List all of the sentences that are repeated twice in a row in a file "repeats". This way you can prove to the narrator that he has a problem and should see a doctor before his dimentia gets worse.


working area:
=============

